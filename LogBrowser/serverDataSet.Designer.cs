//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.3053.
// 
namespace SensorShare {
    using System;
    using System.Data;
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("serverDataSet")]
    public partial class serverDataSet : global::System.Data.DataSet {
        
        private serversDataTable tableservers;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public serverDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public serversDataTable servers {
            get {
                return this.tableservers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            serverDataSet cln = ((serverDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["servers"] != null)) {
                    base.Tables.Add(new serversDataTable(ds.Tables["servers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableservers = ((serversDataTable)(base.Tables["servers"]));
            if ((initTable == true)) {
                if ((this.tableservers != null)) {
                    this.tableservers.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "serverDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/serverDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableservers = new serversDataTable();
            base.Tables.Add(this.tableservers);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeservers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            serverDataSet ds = new serverDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void serversRowChangeEventHandler(object sender, serversRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class serversDataTable : global::System.Data.TypedTableBase<serversRow> {
            
            private global::System.Data.DataColumn columnserver_id;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnsensor_1_unit;
            
            private global::System.Data.DataColumn columnsensor_3_unit;
            
            private global::System.Data.DataColumn columnsensor_4_unit;
            
            private global::System.Data.DataColumn columnsensor_1_range;
            
            private global::System.Data.DataColumn columnsensor_2_range;
            
            private global::System.Data.DataColumn columnsensor_3_range;
            
            private global::System.Data.DataColumn columnsensor_4_range;
            
            private global::System.Data.DataColumn columnsensor_1_id;
            
            private global::System.Data.DataColumn columnsensor_2_id;
            
            private global::System.Data.DataColumn columnsensor_3_id;
            
            private global::System.Data.DataColumn columnsensor_4_id;
            
            private global::System.Data.DataColumn columnsensor_2_unit;
            
            private global::System.Data.DataColumn columndescription;
            
            private global::System.Data.DataColumn columnlocation;
            
            private global::System.Data.DataColumn columnimage;
            
            private global::System.Data.DataColumn columnsensor_1_name;
            
            private global::System.Data.DataColumn columnsensor_2_name;
            
            private global::System.Data.DataColumn columnsensor_3_name;
            
            private global::System.Data.DataColumn columnsensor_4_name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public serversDataTable() {
                this.TableName = "servers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal serversDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn server_idColumn {
                get {
                    return this.columnserver_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_1_unitColumn {
                get {
                    return this.columnsensor_1_unit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_3_unitColumn {
                get {
                    return this.columnsensor_3_unit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_4_unitColumn {
                get {
                    return this.columnsensor_4_unit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_1_rangeColumn {
                get {
                    return this.columnsensor_1_range;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_2_rangeColumn {
                get {
                    return this.columnsensor_2_range;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_3_rangeColumn {
                get {
                    return this.columnsensor_3_range;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_4_rangeColumn {
                get {
                    return this.columnsensor_4_range;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_1_idColumn {
                get {
                    return this.columnsensor_1_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_2_idColumn {
                get {
                    return this.columnsensor_2_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_3_idColumn {
                get {
                    return this.columnsensor_3_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_4_idColumn {
                get {
                    return this.columnsensor_4_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_2_unitColumn {
                get {
                    return this.columnsensor_2_unit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn locationColumn {
                get {
                    return this.columnlocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn imageColumn {
                get {
                    return this.columnimage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_1_nameColumn {
                get {
                    return this.columnsensor_1_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_2_nameColumn {
                get {
                    return this.columnsensor_2_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_3_nameColumn {
                get {
                    return this.columnsensor_3_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensor_4_nameColumn {
                get {
                    return this.columnsensor_4_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public serversRow this[int index] {
                get {
                    return ((serversRow)(this.Rows[index]));
                }
            }
            
            public event serversRowChangeEventHandler serversRowChanging;
            
            public event serversRowChangeEventHandler serversRowChanged;
            
            public event serversRowChangeEventHandler serversRowDeleting;
            
            public event serversRowChangeEventHandler serversRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddserversRow(serversRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public serversRow AddserversRow(
                        System.Guid server_id, 
                        string name, 
                        string sensor_1_unit, 
                        string sensor_3_unit, 
                        string sensor_4_unit, 
                        long sensor_1_range, 
                        long sensor_2_range, 
                        long sensor_3_range, 
                        long sensor_4_range, 
                        long sensor_1_id, 
                        long sensor_2_id, 
                        long sensor_3_id, 
                        long sensor_4_id, 
                        string sensor_2_unit, 
                        string description, 
                        string location, 
                        byte[] image, 
                        string sensor_1_name, 
                        string sensor_2_name, 
                        string sensor_3_name, 
                        string sensor_4_name) {
                serversRow rowserversRow = ((serversRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        server_id,
                        name,
                        sensor_1_unit,
                        sensor_3_unit,
                        sensor_4_unit,
                        sensor_1_range,
                        sensor_2_range,
                        sensor_3_range,
                        sensor_4_range,
                        sensor_1_id,
                        sensor_2_id,
                        sensor_3_id,
                        sensor_4_id,
                        sensor_2_unit,
                        description,
                        location,
                        image,
                        sensor_1_name,
                        sensor_2_name,
                        sensor_3_name,
                        sensor_4_name};
                rowserversRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowserversRow);
                return rowserversRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public serversRow FindByserver_id(System.Guid server_id) {
                return ((serversRow)(this.Rows.Find(new object[] {
                            server_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                serversDataTable cln = ((serversDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new serversDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnserver_id = base.Columns["server_id"];
                this.columnname = base.Columns["name"];
                this.columnsensor_1_unit = base.Columns["sensor_1_unit"];
                this.columnsensor_3_unit = base.Columns["sensor_3_unit"];
                this.columnsensor_4_unit = base.Columns["sensor_4_unit"];
                this.columnsensor_1_range = base.Columns["sensor_1_range"];
                this.columnsensor_2_range = base.Columns["sensor_2_range"];
                this.columnsensor_3_range = base.Columns["sensor_3_range"];
                this.columnsensor_4_range = base.Columns["sensor_4_range"];
                this.columnsensor_1_id = base.Columns["sensor_1_id"];
                this.columnsensor_2_id = base.Columns["sensor_2_id"];
                this.columnsensor_3_id = base.Columns["sensor_3_id"];
                this.columnsensor_4_id = base.Columns["sensor_4_id"];
                this.columnsensor_2_unit = base.Columns["sensor_2_unit"];
                this.columndescription = base.Columns["description"];
                this.columnlocation = base.Columns["location"];
                this.columnimage = base.Columns["image"];
                this.columnsensor_1_name = base.Columns["sensor_1_name"];
                this.columnsensor_2_name = base.Columns["sensor_2_name"];
                this.columnsensor_3_name = base.Columns["sensor_3_name"];
                this.columnsensor_4_name = base.Columns["sensor_4_name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnserver_id = new global::System.Data.DataColumn("server_id", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnserver_id);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnsensor_1_unit = new global::System.Data.DataColumn("sensor_1_unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_1_unit);
                this.columnsensor_3_unit = new global::System.Data.DataColumn("sensor_3_unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_3_unit);
                this.columnsensor_4_unit = new global::System.Data.DataColumn("sensor_4_unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_4_unit);
                this.columnsensor_1_range = new global::System.Data.DataColumn("sensor_1_range", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_1_range);
                this.columnsensor_2_range = new global::System.Data.DataColumn("sensor_2_range", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_2_range);
                this.columnsensor_3_range = new global::System.Data.DataColumn("sensor_3_range", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_3_range);
                this.columnsensor_4_range = new global::System.Data.DataColumn("sensor_4_range", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_4_range);
                this.columnsensor_1_id = new global::System.Data.DataColumn("sensor_1_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_1_id);
                this.columnsensor_2_id = new global::System.Data.DataColumn("sensor_2_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_2_id);
                this.columnsensor_3_id = new global::System.Data.DataColumn("sensor_3_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_3_id);
                this.columnsensor_4_id = new global::System.Data.DataColumn("sensor_4_id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_4_id);
                this.columnsensor_2_unit = new global::System.Data.DataColumn("sensor_2_unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_2_unit);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columnlocation = new global::System.Data.DataColumn("location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocation);
                this.columnimage = new global::System.Data.DataColumn("image", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnimage);
                this.columnsensor_1_name = new global::System.Data.DataColumn("sensor_1_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_1_name);
                this.columnsensor_2_name = new global::System.Data.DataColumn("sensor_2_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_2_name);
                this.columnsensor_3_name = new global::System.Data.DataColumn("sensor_3_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_3_name);
                this.columnsensor_4_name = new global::System.Data.DataColumn("sensor_4_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor_4_name);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnserver_id}, true));
                this.columnserver_id.AllowDBNull = false;
                this.columnserver_id.Unique = true;
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 50;
                this.columnsensor_1_unit.MaxLength = 50;
                this.columnsensor_3_unit.MaxLength = 50;
                this.columnsensor_4_unit.MaxLength = 50;
                this.columnsensor_1_range.AllowDBNull = false;
                this.columnsensor_2_range.AllowDBNull = false;
                this.columnsensor_3_range.AllowDBNull = false;
                this.columnsensor_4_range.AllowDBNull = false;
                this.columnsensor_1_id.AllowDBNull = false;
                this.columnsensor_2_id.AllowDBNull = false;
                this.columnsensor_3_id.AllowDBNull = false;
                this.columnsensor_4_id.AllowDBNull = false;
                this.columnsensor_2_unit.MaxLength = 50;
                this.columndescription.AllowDBNull = false;
                this.columndescription.MaxLength = 255;
                this.columnlocation.AllowDBNull = false;
                this.columnlocation.MaxLength = 127;
                this.columnsensor_1_name.MaxLength = 50;
                this.columnsensor_2_name.MaxLength = 50;
                this.columnsensor_3_name.MaxLength = 50;
                this.columnsensor_4_name.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public serversRow NewserversRow() {
                return ((serversRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new serversRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(serversRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.serversRowChanged != null)) {
                    this.serversRowChanged(this, new serversRowChangeEvent(((serversRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.serversRowChanging != null)) {
                    this.serversRowChanging(this, new serversRowChangeEvent(((serversRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.serversRowDeleted != null)) {
                    this.serversRowDeleted(this, new serversRowChangeEvent(((serversRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.serversRowDeleting != null)) {
                    this.serversRowDeleting(this, new serversRowChangeEvent(((serversRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveserversRow(serversRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                serverDataSet ds = new serverDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "serversDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class serversRow : global::System.Data.DataRow {
            
            private serversDataTable tableservers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal serversRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableservers = ((serversDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid server_id {
                get {
                    return ((global::System.Guid)(this[this.tableservers.server_idColumn]));
                }
                set {
                    this[this.tableservers.server_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableservers.nameColumn]));
                }
                set {
                    this[this.tableservers.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor_1_unit {
                get {
                    try {
                        return ((string)(this[this.tableservers.sensor_1_unitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensor_1_unit\' in table \'servers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableservers.sensor_1_unitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor_3_unit {
                get {
                    try {
                        return ((string)(this[this.tableservers.sensor_3_unitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensor_3_unit\' in table \'servers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableservers.sensor_3_unitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor_4_unit {
                get {
                    try {
                        return ((string)(this[this.tableservers.sensor_4_unitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensor_4_unit\' in table \'servers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableservers.sensor_4_unitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long sensor_1_range {
                get {
                    return ((long)(this[this.tableservers.sensor_1_rangeColumn]));
                }
                set {
                    this[this.tableservers.sensor_1_rangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long sensor_2_range {
                get {
                    return ((long)(this[this.tableservers.sensor_2_rangeColumn]));
                }
                set {
                    this[this.tableservers.sensor_2_rangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long sensor_3_range {
                get {
                    return ((long)(this[this.tableservers.sensor_3_rangeColumn]));
                }
                set {
                    this[this.tableservers.sensor_3_rangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long sensor_4_range {
                get {
                    return ((long)(this[this.tableservers.sensor_4_rangeColumn]));
                }
                set {
                    this[this.tableservers.sensor_4_rangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long sensor_1_id {
                get {
                    return ((long)(this[this.tableservers.sensor_1_idColumn]));
                }
                set {
                    this[this.tableservers.sensor_1_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long sensor_2_id {
                get {
                    return ((long)(this[this.tableservers.sensor_2_idColumn]));
                }
                set {
                    this[this.tableservers.sensor_2_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long sensor_3_id {
                get {
                    return ((long)(this[this.tableservers.sensor_3_idColumn]));
                }
                set {
                    this[this.tableservers.sensor_3_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long sensor_4_id {
                get {
                    return ((long)(this[this.tableservers.sensor_4_idColumn]));
                }
                set {
                    this[this.tableservers.sensor_4_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor_2_unit {
                get {
                    try {
                        return ((string)(this[this.tableservers.sensor_2_unitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensor_2_unit\' in table \'servers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableservers.sensor_2_unitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    return ((string)(this[this.tableservers.descriptionColumn]));
                }
                set {
                    this[this.tableservers.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string location {
                get {
                    return ((string)(this[this.tableservers.locationColumn]));
                }
                set {
                    this[this.tableservers.locationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] image {
                get {
                    try {
                        return ((byte[])(this[this.tableservers.imageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'image\' in table \'servers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableservers.imageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor_1_name {
                get {
                    try {
                        return ((string)(this[this.tableservers.sensor_1_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensor_1_name\' in table \'servers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableservers.sensor_1_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor_2_name {
                get {
                    try {
                        return ((string)(this[this.tableservers.sensor_2_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensor_2_name\' in table \'servers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableservers.sensor_2_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor_3_name {
                get {
                    try {
                        return ((string)(this[this.tableservers.sensor_3_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensor_3_name\' in table \'servers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableservers.sensor_3_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor_4_name {
                get {
                    try {
                        return ((string)(this[this.tableservers.sensor_4_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensor_4_name\' in table \'servers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableservers.sensor_4_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issensor_1_unitNull() {
                return this.IsNull(this.tableservers.sensor_1_unitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsensor_1_unitNull() {
                this[this.tableservers.sensor_1_unitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issensor_3_unitNull() {
                return this.IsNull(this.tableservers.sensor_3_unitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsensor_3_unitNull() {
                this[this.tableservers.sensor_3_unitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issensor_4_unitNull() {
                return this.IsNull(this.tableservers.sensor_4_unitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsensor_4_unitNull() {
                this[this.tableservers.sensor_4_unitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issensor_2_unitNull() {
                return this.IsNull(this.tableservers.sensor_2_unitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsensor_2_unitNull() {
                this[this.tableservers.sensor_2_unitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsimageNull() {
                return this.IsNull(this.tableservers.imageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetimageNull() {
                this[this.tableservers.imageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issensor_1_nameNull() {
                return this.IsNull(this.tableservers.sensor_1_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsensor_1_nameNull() {
                this[this.tableservers.sensor_1_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issensor_2_nameNull() {
                return this.IsNull(this.tableservers.sensor_2_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsensor_2_nameNull() {
                this[this.tableservers.sensor_2_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issensor_3_nameNull() {
                return this.IsNull(this.tableservers.sensor_3_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsensor_3_nameNull() {
                this[this.tableservers.sensor_3_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issensor_4_nameNull() {
                return this.IsNull(this.tableservers.sensor_4_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsensor_4_nameNull() {
                this[this.tableservers.sensor_4_nameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class serversRowChangeEvent : global::System.EventArgs {
            
            private serversRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public serversRowChangeEvent(serversRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public serversRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace serverDataSetUtil {
    using System;
    using System.Data;
    
    
    public partial class DesignerUtil {
        
        public static bool IsDesignTime() {
            // Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("B77A5C561934E089")) {
                    return true;
                }
            }
            return false;
        }
        
        public static bool IsRunTime() {
            // Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("969DB8053D3322AC")) {
                    return true;
                }
            }
            return false;
        }
    }
}
